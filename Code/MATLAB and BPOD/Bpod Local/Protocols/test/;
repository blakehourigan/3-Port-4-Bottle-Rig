BpodSystem.FlexIOConfig.channelTypes = [1 1 1 1];

 S = BpodSystem.ProtocolSettings; % Loads settings file chosen in launch manager into current workspace as a struct called 'S'
 if isempty(fieldnames(S))  % If settings file was an empty struct, populate struct with default settings

     subj = BpodSystem.GUIData.SubjectName;
     dir = ['C:\Users\Chad Samuelsen\Documents\Github\Bpod Local\Data\FakeSubject\Set_param_Ortho_Set_1\Session Settings\DefaultSettings.mat'];
     temp = load(dir);
     S = temp.ProtocolSettings; clear temp;
    
     % init an empty cell array to hold names of gui fields to remove 
    fields = {};
    for i = 1:8
        fieldname = sprintf('valve_line_%d', i);

        fields{end+1} = fieldname;
        
        fieldname = sprintf('Valve_%d', i);

        fields{end+1} = fieldname;
    end
    fields

     S.GUIMeta = rmfield(S.GUIMeta, fields); % Using a cell array

    S.GUI = rmfield(S.GUI, fields);

    S.GUIPanels = rmfield(S.GUIPanels, {'Current_valve_assignments','Manual_Taste_Valves'});

    BpodSystem.ProtocolSettings = S;
 end;

 BpodParameterGUI('init', S); % initialize GUI to keep track of parameters
 S.stimuli_sequence

 for current_trial = 1:600
     trial_valve = S.stimuli_sequence(current_trial);

     LoadSerialMessages('ValveModule1', {['O' 1], ['C' trial_valve]});  % Just play with Valve 1 for the moment

     valve_time_variable = sprintf('open_time_%d', trial_valve); 

     valve_time = BpodSystem.ProtocolSettings.GUI.(valve_time_variable)/1000;

     S = BpodParameterGUI('sync', S); 

     sma = NewStateMachine();

     sma = AddState(sma, 'Name', 'start', ...
         'Timer', 1,...
         'StateChangeConditions', {'Tup', 'moveCenterPortRight'},...
         'OutputActions',{'Flex1DO', 0, 'Flex2DO', 0,'Flex3DO', 0, 'Flex4DO', 0});

     sma = AddState(sma, 'Name', 'moveCenterPortRight', ...
         'Timer', 3,...
         'StateChangeConditions', {'Tup', 'centerPortDown'},...
         'OutputActions',{'Flex1DO', 0, 'Flex2DO', 0,'Flex3DO', 0, 'Flex4DO', 1});

     sma = AddState(sma, 'Name', 'centerPortDown', ...
         'Timer', 10,...
         'StateChangeConditions', {'Tup', 'reward'},...
         'OutputActions',{'Flex1DO', 0, 'Flex2DO', 1,'Flex3DO', 0, 'Flex4DO', 1});

     sma = AddState(sma, 'Name', 'flip_valve_one', ...
         'Timer', valve_time,...
         'StateChangeConditions', {'Tup', 'flipValveOff'},...
         'OutputActions',{'Flex1DO', 0, 'Flex2DO', 1,'Flex3DO', 0, 'Flex4DO', 1});
     

     sma = AddState(sma, 'Name', 'reward', ...
         'Timer', 20,...
         'StateChangeConditions', {'Tup', 'exit'},...
         'OutputActions',{'Flex1DO', 1, 'Flex2DO', 0,'Flex3DO', 1, 'Flex4DO', 0});

     SendStateMachine(sma);
     events = RunStateMachine();
     end





